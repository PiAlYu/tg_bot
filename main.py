import os
import json
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram import BotCommand

# === –§–ê–ô–õ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===
DATA_FILE = "shopping_lists.json"

def load_shopping_lists():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_shopping_lists(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –û–ë–©–ò–ô –°–ü–ò–°–û–ö ===
shopping_lists = load_shopping_lists()
current_items = {}

# === –ú–ï–ù–Æ ===

def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫")],
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")],
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")]
        ],
        resize_keyboard=True
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=get_main_menu()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫":
        if "global" in shopping_lists:
            await update.message.reply_text(shopping_lists["global"])
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤":
        if "global" in shopping_lists:
            lines = shopping_lists["global"].splitlines()
            if not lines:
                await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
                return
            current_items["global"] = lines[1:]  # –∏—Å–∫–ª—é—á–∞–µ–º –¥–∞—Ç—É
            await send_item_buttons(update, current_items["global"])
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–∞—Ç–∞, –¥–∞–ª–µ–µ ‚Äî —Ç–æ–≤–∞—Ä—ã).")
        context.user_data["awaiting_list"] = True
    elif context.user_data.get("awaiting_list"):
        shopping_lists["global"] = text
        save_shopping_lists(shopping_lists)
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu())
        context.user_data["awaiting_list"] = False
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

async def send_item_buttons(update: Update, items):
    if not items:
        await update.message.reply_text("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∫—É–ø–ª–µ–Ω—ã!")
        return

    keyboard = [[InlineKeyboardButton(text=item, callback_data=item)] for item in items]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    item_clicked = query.data

    if "global" in current_items:
        current_items["global"] = [i for i in current_items["global"] if i != item_clicked]

        if current_items["global"]:
            keyboard = [[InlineKeyboardButton(text=item, callback_data=item)] for item in current_items["global"]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∫—É–ø–ª–µ–Ω—ã!")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ üéâ
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üéâ"
            )
    else:
        await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

def main():
    TOKEN = os.getenv("BOT_TOKEN")  # –ò–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–π

    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∏–Ω–µ–≥–æ –º–µ–Ω—é
    async def set_bot_commands(app):
        await app.bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        ])

    app.post_init = set_bot_commands

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    main()
